package com.xxd.mappers;

import com.xxd.models.XxdIntegrationTransfer;

import java.util.ArrayList;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface XxdIntegrationTransferMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_transfer
     *
     * @mbggenerated
     */
    @Delete({
        "delete from xxd_integration_transfer",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_transfer
     *
     * @mbggenerated
     */
    @Insert({
        "insert into xxd_integration_transfer (id, integration, ",
        "time, from_id, to_id, ",
        "transfer_type)",
        "values (#{id,jdbcType=INTEGER}, #{integration,jdbcType=DECIMAL}, ",
        "#{time,jdbcType=VARCHAR}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, ",
        "#{transferType,jdbcType=SMALLINT})"
    })
    int insert(XxdIntegrationTransfer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_transfer
     *
     * @mbggenerated
     */
    @InsertProvider(type=XxdIntegrationTransferSqlProvider.class, method="insertSelective")
    int insertSelective(XxdIntegrationTransfer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_transfer
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, integration, time, from_id, to_id, transfer_type",
        "from xxd_integration_transfer",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="from_id", property="fromId", jdbcType=JdbcType.INTEGER),
        @Result(column="to_id", property="toId", jdbcType=JdbcType.INTEGER),
        @Result(column="transfer_type", property="transferType", jdbcType=JdbcType.SMALLINT)
    })
    XxdIntegrationTransfer selectByPrimaryKey(Integer id);
    
    @Select({
        "select",
        "id, integration, time, from_id, to_id, transfer_type",
        "from xxd_integration_transfer"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="from_id", property="fromId", jdbcType=JdbcType.INTEGER),
        @Result(column="to_id", property="toId", jdbcType=JdbcType.INTEGER),
        @Result(column="transfer_type", property="transferType", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdIntegrationTransfer> selectAll();
    
    @Select({
        "select",
        "id, integration, time, from_id, to_id, transfer_type",
        "from xxd_integration_transfer",
        "where from_id = #{uid,jdbcType=INTEGER} or to_id = #{uid,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="from_id", property="fromId", jdbcType=JdbcType.INTEGER),
        @Result(column="to_id", property="toId", jdbcType=JdbcType.INTEGER),
        @Result(column="transfer_type", property="transferType", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdIntegrationTransfer> selectByUid(Integer uid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_transfer
     *
     * @mbggenerated
     */
    @UpdateProvider(type=XxdIntegrationTransferSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(XxdIntegrationTransfer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_transfer
     *
     * @mbggenerated
     */
    @Update({
        "update xxd_integration_transfer",
        "set integration = #{integration,jdbcType=DECIMAL},",
          "time = #{time,jdbcType=VARCHAR},",
          "from_id = #{fromId,jdbcType=INTEGER},",
          "to_id = #{toId,jdbcType=INTEGER},",
          "transfer_type = #{transferType,jdbcType=SMALLINT}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(XxdIntegrationTransfer record);
}