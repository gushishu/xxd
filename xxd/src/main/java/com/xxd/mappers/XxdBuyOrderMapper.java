package com.xxd.mappers;

import com.xxd.models.XxdBuyOrder;
import com.xxd.models.XxdDeclaration;
import com.xxd.models.XxdOrder;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface XxdBuyOrderMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_buy_order
     *
     * @mbggenerated
     */
    @Delete({
        "delete from xxd_buy_order",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_buy_order
     *
     * @mbggenerated
     */
    @Insert({
        "insert into xxd_buy_order (id, time, ",
        "total_price, addr_id, ",
        "seller_id, freight_id, ",
        "order_id, buy_id, ",
        "sta, type)",
        "values (#{id,jdbcType=INTEGER}, #{time,jdbcType=VARCHAR}, ",
        "#{totalPrice,jdbcType=DECIMAL}, #{addrId,jdbcType=INTEGER}, ",
        "#{freightId,jdbcType=INTEGER}, ",
        "#{orderId,jdbcType=VARCHAR}, #{buyId,jdbcType=INTEGER}, ",
        "#{sta,jdbcType=SMALLINT}, #{type,jdbcType=SMALLINT})"
    })
    int insert(XxdBuyOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_buy_order
     *
     * @mbggenerated
     */
    @InsertProvider(type=XxdBuyOrderSqlProvider.class, method="insertSelective")
    int insertSelective(XxdBuyOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_buy_order
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, time, total_price, addr_id, freight_id, order_id, buy_id, sta, type",
        "from xxd_buy_order",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    XxdBuyOrder selectByPrimaryKey(Integer id);
    
    @Select({
        "select",
        "id, time, total_price, addr_id, freight_id, order_id, buy_id, sta, type",
        "from xxd_buy_order"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdBuyOrder> selectAll();
    
    @Select({
    	"SELECT",
    	"xbo.time",
    	"FROM xxd_buy_order xbo INNER JOIN xxd_user xu ON xbo.buy_id = xu.uid ",
    	"WHERE (xu.type =2 OR xu.type=3) AND xbo.time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdBuyOrder> selectUpMemberBuyTime(String time);
    
    @Select({
    	"SELECT",
    	"COUNT(*)",
    	"FROM xxd_buy_order xbo INNER JOIN xxd_user xu ON xbo.buy_id = xu.uid ",
    	"WHERE (xu.type =2 OR xu.type=3) AND xbo.time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    Integer selectUpMemberCount(String time);
    
    @Select({
    	"SELECT",
    	"xbo.time",
    	"FROM xxd_buy_order xbo INNER JOIN xxd_user xu ON xbo.buy_id = xu.uid ",
    	"WHERE xu.type =4 AND xbo.time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdBuyOrder> selectMemberBuyTime(String time);
    
    @Select({
    	"SELECT",
    	"COUNT(*)",
    	"FROM xxd_buy_order xbo INNER JOIN xxd_user xu ON xbo.buy_id = xu.uid ",
    	"WHERE xu.type =4 AND xbo.time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    Integer selectMemberCount(String time);
    
    @Select({
    	"SELECT",
    	"xbo.time",
    	"FROM xxd_buy_order xbo INNER JOIN xxd_user xu ON xbo.buy_id = xu.uid ",
    	"WHERE  xbo.time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdBuyOrder> selectAllBuyTime(String time);
    
    @Select({
    	"SELECT",
    	"COUNT(*)",
    	"FROM xxd_buy_order xbo INNER JOIN xxd_user xu ON xbo.buy_id = xu.uid ",
    	"WHERE  xbo.time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    Integer selectAllCount(String time);
    
    
    
    @Select({
        "select",
        "id, time, total_price, addr_id, freight_id, order_id, buy_id, sta, type",
        "from xxd_buy_order",
        "where type = #{type,jdbcType=SMALLINT}",
        "and buy_id = #{buyId,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdBuyOrder> selectAllByUidType(XxdBuyOrder record);
    
    @Select({
        "select",
        "id, time, total_price, addr_id, freight_id, order_id, buy_id, sta, type",
        "from xxd_buy_order",
        "where type = #{type,jdbcType=SMALLINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="total_price", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="addr_id", property="addrId", jdbcType=JdbcType.INTEGER),
        @Result(column="freight_id", property="freightId", jdbcType=JdbcType.INTEGER),
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT)
    })
    ArrayList<XxdBuyOrder> selectAllByType(Short type);
    
    @Select({
        "select xbod.id id,xbo.order_id order_id,xg.name name,xg.show_img_dir show_img_dir,xbod.num num,",
        "xbod.prices price,(xif.integration/xbod.num) prices,",
        "xgp.format_name format_name,xu.uid uid, xu.username username,xbo.addr_id addr_id,xbod.sta sta,xbo.time time,xoen.order_no expressNo",
        "from (xxd_goods xg,xxd_buy_order_details xbod,xxd_goods_price xgp,xxd_buy_order xbo,xxd_user xu,xxd_integration_freeze xif) left join xxd_order_express_no xoen on xoen.order_id = xbod.id",
        "where xg.ownership_leader_id = #{buyId, jdbcType=INTEGER}",
        "and xg.id = xbod.goods_id",
        "and xg.id = xgp.goods_id",
        "and xgp.id = xbod.price",
        "and xbo.id = xbod.buy_order_id",
        "and xbo.buy_id = xu.uid",
        "and xbod.id = xif.odid",
        "and xif.freeze_type = 2",
        "and xbo.type = #{type, jdbcType=SMALLINT}"
    })
    @Results({
    	@Result(column="id", property="id", jdbcType=JdbcType.INTEGER),
    	@Result(column="order_id", property="order_id", jdbcType=JdbcType.INTEGER),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="show_img_dir", property="show_img_dir", jdbcType=JdbcType.VARCHAR),
        @Result(column="num", property="num", jdbcType=JdbcType.INTEGER),
        @Result(column="price", property="price", jdbcType=JdbcType.DECIMAL),
        @Result(column="prices", property="prices", jdbcType=JdbcType.DECIMAL),
        @Result(column="format_name", property="format_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="addr_id", property="addr_id", jdbcType=JdbcType.INTEGER),
    	@Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
    	@Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
    	@Result(column="expressNo", property="expressNo", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdOrder> selectAllsByUidType(XxdBuyOrder record);
    
    
    @Select({
        "select xbod.id id,xbo.order_id order_id,xg.name name,xg.show_img_dir show_img_dir,xbod.num num,",
        "xbod.prices price,",
        "xgp.format_name format_name,xu.uid uid, xu.username username,xbo.addr_id addr_id,xbod.sta sta,xbo.time time,xoen.order_no expressNo",
        "from (xxd_goods xg,xxd_buy_order_details xbod,xxd_goods_price xgp,xxd_buy_order xbo,xxd_user xu) left join xxd_order_express_no xoen on xoen.order_id = xbod.id",
        "where xg.ownership_leader_id = #{buyId, jdbcType=INTEGER}",
        "and xg.id = xbod.goods_id",
        "and xg.id = xgp.goods_id",
        "and xgp.id = xbod.price",
        "and xbo.id = xbod.buy_order_id",
        "and xbo.buy_id = xu.uid",
        "and xbo.type = #{type, jdbcType=SMALLINT} group by xbod.id"
    })
    @Results({
    	@Result(column="id", property="id", jdbcType=JdbcType.INTEGER),
    	@Result(column="order_id", property="order_id", jdbcType=JdbcType.INTEGER),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="show_img_dir", property="show_img_dir", jdbcType=JdbcType.VARCHAR),
        @Result(column="num", property="num", jdbcType=JdbcType.INTEGER),
        @Result(column="price", property="price", jdbcType=JdbcType.DECIMAL),
        @Result(column="format_name", property="format_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="addr_id", property="addr_id", jdbcType=JdbcType.INTEGER),
    	@Result(column="sta", property="sta", jdbcType=JdbcType.SMALLINT),
    	@Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
    	@Result(column="expressNo", property="expressNo", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdOrder> selectOwnerAllsByUidType(XxdBuyOrder record);

    @Select({
    	"select",
    	"xppo.id id,(xbo1.total_price + xbo2.total_price) totalPrice,xbo1.total_price ownerPrice,xbo2.total_price leaderPrice,",
    	"xu.username username,xu.name name,xu.phonenumber phonenumber,xu.id_card idCard,xu.bank_card bankCard,xu.bank_location bankLocation,",
    	"xu1.uid parentUid,xu1.username parentUsername,xu1.name parentName",
    	"from xxd_product_package_order xppo,xxd_buy_order xbo1,xxd_buy_order xbo2,xxd_user xu,xxd_integration_freeze xif,xxd_user xu1",
    	"where xppo.buy_order_id = xbo1.id",
    	"and xppo.owner_order_id = xbo2.id",
    	"and xbo1.buy_id = xu.uid",
    	"and xif.odid = xppo.id",
    	"and xu1.uid = xif.buy_uid",
    	"group by xppo.id"
    })
    @Results({
    	@Result(column="id", property="id", jdbcType=JdbcType.INTEGER),
    	@Result(column="totalPrice", property="totalPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="leaderPrice", property="leaderPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="ownerPrice", property="ownerPrice", jdbcType=JdbcType.DECIMAL),
        @Result(column="parentUid", property="parentUid", jdbcType=JdbcType.INTEGER),
        @Result(column="parentUsername", property="parentUsername", jdbcType=JdbcType.VARCHAR),
        @Result(column="parentName", property="parentName", jdbcType=JdbcType.VARCHAR),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
    	@Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
    	@Result(column="idCard", property="idCard", jdbcType=JdbcType.VARCHAR),
    	@Result(column="bankCard", property="bankCard", jdbcType=JdbcType.VARCHAR),
    	@Result(column="bankLocation", property="bankLocation", jdbcType=JdbcType.VARCHAR),
    	@Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
    })
    ArrayList<XxdDeclaration> selectProductPackage();
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_buy_order
     *
     * @mbggenerated
     */
    @UpdateProvider(type=XxdBuyOrderSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(XxdBuyOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_buy_order
     *
     * @mbggenerated
     */
    @Update({
        "update xxd_buy_order",
        "set time = #{time,jdbcType=VARCHAR},",
          "total_price = #{totalPrice,jdbcType=DECIMAL},",
          "addr_id = #{addrId,jdbcType=INTEGER},",
          "freight_id = #{freightId,jdbcType=INTEGER},",
          "order_id = #{orderId,jdbcType=VARCHAR},",
          "buy_id = #{buyId,jdbcType=INTEGER},",
          "sta = #{sta,jdbcType=SMALLINT}",
          "type = #{type,jdbcType=SMALLINT}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(XxdBuyOrder record);
}