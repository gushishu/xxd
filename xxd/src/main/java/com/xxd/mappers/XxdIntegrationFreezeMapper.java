package com.xxd.mappers;

import com.xxd.models.XxdIntegrationFreeze;

import java.util.ArrayList;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface XxdIntegrationFreezeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_freeze
     *
     * @mbggenerated
     */
    @Delete({
        "delete from xxd_integration_freeze",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_freeze
     *
     * @mbggenerated
     */
    @Insert({
        "insert into xxd_integration_freeze (id, buy_uid, ",
        "freeze_type, time, ",
        "times, integration, ",
        "uid)",
        "values (#{id,jdbcType=INTEGER}, #{buyUid,jdbcType=INTEGER}, ",
        "#{freezeType,jdbcType=SMALLINT}, #{time,jdbcType=VARCHAR}, ",
        "#{times,jdbcType=VARCHAR}, #{integration,jdbcType=DECIMAL}, ",
        "#{uid,jdbcType=INTEGER})"
    })
    int insert(XxdIntegrationFreeze record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_freeze
     *
     * @mbggenerated
     */
    @InsertProvider(type=XxdIntegrationFreezeSqlProvider.class, method="insertSelective")
    int insertSelective(XxdIntegrationFreeze record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_freeze
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, buy_uid, freeze_type, time, times, integration, uid",
        "from xxd_integration_freeze",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="buy_uid", property="buyUid", jdbcType=JdbcType.INTEGER),
        @Result(column="freeze_type", property="freezeType", jdbcType=JdbcType.SMALLINT),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="times", property="times", jdbcType=JdbcType.VARCHAR),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER)
    })
    XxdIntegrationFreeze selectByPrimaryKey(Integer id);
    
    @Select({
        "select",
        "id, buy_uid, freeze_type, time, times, integration, uid",
        "from xxd_integration_freeze",
        "where id = #{id,jdbcType=INTEGER}",
        "and",
        "((select xu.parent_id from xxd_user xu where xu.uid = xif.uid) = #{parent_id,jdbcType=INTEGER}",
        "or",
        "(select xu.parent_id from xxd_user xu where xu.uid = (select xu.parent_id from xxd_user xu where xu.uid = xif.uid)) = #{parent_id,jdbcType=INTEGER})"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="buy_uid", property="buyUid", jdbcType=JdbcType.INTEGER),
        @Result(column="freeze_type", property="freezeType", jdbcType=JdbcType.SMALLINT),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="times", property="times", jdbcType=JdbcType.VARCHAR),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER)
    })
    XxdIntegrationFreeze selectByPrimaryKeyParentId(Integer id, Integer parent_id);
    
    @Select({
        "select",
        "id, buy_uid, freeze_type, time, times, integration, uid",
        "from xxd_integration_freeze"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="buy_uid", property="buyUid", jdbcType=JdbcType.INTEGER),
        @Result(column="freeze_type", property="freezeType", jdbcType=JdbcType.SMALLINT),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="times", property="times", jdbcType=JdbcType.VARCHAR),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdIntegrationFreeze> selectAll();
    
    @Select({
        "select",
        "id, buy_uid, freeze_type, time, times, integration, uid",
        "from xxd_integration_freeze",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="buy_uid", property="buyUid", jdbcType=JdbcType.INTEGER),
        @Result(column="freeze_type", property="freezeType", jdbcType=JdbcType.SMALLINT),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="times", property="times", jdbcType=JdbcType.VARCHAR),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdIntegrationFreeze> selectByUid(Integer uid);
    
    @Select({
        "select",
        "xif.id id, xif.integration integration, xif.uid uid, xif.odid odid",
        "from xxd_integration_freeze xif left join xxd_buy_order_details xbod on xif.odid = xbod.id",
        "where xif.times is null and DATE_ADD(xif.time, interval 5 day) < now() and (xif.freeze_type = 2 or xif.freeze_type = 4 or xif.freeze_type = 5) and xif.uid > 0 and xbod.sta = 2"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER),
        @Result(column="odid", property="odid", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdIntegrationFreeze> selectAbleFreeze();
    
    @Delete({
        "delete from xxd_buy_order where type = 2 and sta = 1 and DATE_ADD(time, interval 30 MINUTE) < now()"
    })
    int delInvalidOrder();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_freeze
     *
     * @mbggenerated
     */
    @UpdateProvider(type=XxdIntegrationFreezeSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(XxdIntegrationFreeze record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_integration_freeze
     *
     * @mbggenerated
     */
    @Update({
        "update xxd_integration_freeze",
        "set buy_uid = #{buyUid,jdbcType=INTEGER},",
          "freeze_type = #{freezeType,jdbcType=SMALLINT},",
          "time = #{time,jdbcType=VARCHAR},",
          "times = #{times,jdbcType=VARCHAR},",
          "integration = #{integration,jdbcType=DECIMAL},",
          "uid = #{uid,jdbcType=INTEGER}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(XxdIntegrationFreeze record);
}