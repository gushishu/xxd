package com.xxd.mappers;

import com.xxd.models.XxdImageMake;
import com.xxd.models.XxdPictureHandle;

import java.util.ArrayList;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface XxdPictureHandleMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_picture_handle
     *
     * @mbggenerated
     */
    @Delete({
        "delete from xxd_picture_handle",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_picture_handle
     *
     * @mbggenerated
     */
    @Insert({
        "insert into xxd_picture_handle (id, url, ",
        "good_name, handle_time, ",
        "save_dir)",
        "values (#{id,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR}, ",
        "#{goodName,jdbcType=VARCHAR}, #{handleTime,jdbcType=VARCHAR}, ",
        "#{saveDir,jdbcType=VARCHAR})"
    })
    int insert(XxdPictureHandle record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_picture_handle
     *
     * @mbggenerated
     */
    @InsertProvider(type=XxdPictureHandleSqlProvider.class, method="insertSelective")
    int insertSelective(XxdPictureHandle record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_picture_handle
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, url, good_name, handle_time, save_dir",
        "from xxd_picture_handle",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="good_name", property="goodName", jdbcType=JdbcType.VARCHAR),
        @Result(column="handle_time", property="handleTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="save_dir", property="saveDir", jdbcType=JdbcType.VARCHAR)
    })
    XxdPictureHandle selectByPrimaryKey(Integer id);
    
    @Select({
        "select",
        "id, url, good_name, handle_time, save_dir",
        "from xxd_picture_handle",
        "where good_name = #{goodName,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="good_name", property="goodName", jdbcType=JdbcType.VARCHAR),
        @Result(column="handle_time", property="handleTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="save_dir", property="saveDir", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdPictureHandle> selectByGoodName(String goodName);
    
    @Select({
        "select count(*)",
        "from xxd_picture_handle"
    })
    Integer selectCountRecord();
    
    
    
    @Select({
    	"SELECT *",
    	"FROM xxd_picture_handle", 
    	"ORDER BY id DESC LIMIT 10"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="good_name", property="goodName", jdbcType=JdbcType.VARCHAR),
        @Result(column="handle_time", property="handleTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="save_dir", property="saveDir", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdPictureHandle> selectTenRecord();
    
    @Select({
    	"SELECT *", 
    	"FROM xxd_picture_handle",
    	"WHERE good_name LIKE '${goodName}' AND handle_time BETWEEN DATE_FORMAT('${handleTime}','%Y-%m-%d 00:00:00')  AND DATE_FORMAT('${handleTime}','%Y-%m-%d 23:59:59')"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="good_name", property="goodName", jdbcType=JdbcType.VARCHAR),
        @Result(column="handle_time", property="handleTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="save_dir", property="saveDir", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdPictureHandle> selectLookUpHandleRecord(XxdImageMake im);
    
    @Select({
    	"SELECT *",
    	"FROM xxd_picture_handle",
    	"ORDER BY id DESC "
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="good_name", property="goodName", jdbcType=JdbcType.VARCHAR),
        @Result(column="handle_time", property="handleTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="save_dir", property="saveDir", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdPictureHandle> selectAllRecord();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_picture_handle
     *
     * @mbggenerated
     */
    @UpdateProvider(type=XxdPictureHandleSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(XxdPictureHandle record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_picture_handle
     *
     * @mbggenerated
     */
    @Update({
        "update xxd_picture_handle",
        "set url = #{url,jdbcType=VARCHAR},",
          "good_name = #{goodName,jdbcType=VARCHAR},",
          "handle_time = #{handleTime,jdbcType=VARCHAR},",
          "save_dir = #{saveDir,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(XxdPictureHandle record);
}