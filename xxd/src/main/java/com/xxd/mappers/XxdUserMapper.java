package com.xxd.mappers;


import com.xxd.models.XxdCount;
import com.xxd.models.XxdUser;
import com.xxd.models.XxdUserPowerGroup;
import com.xxd.models.XxdUsers;

import java.util.ArrayList;
import java.util.HashMap;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface XxdUserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_user
     *
     * @mbggenerated
     */
    @Delete({
        "delete from xxd_user",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer uid);
    
    @Delete({
        "delete from xxd_user",
        "where uid = #{uid,jdbcType=INTEGER}",
        "and type = #{type,jdbcType=SMALLINT}",
        "and parent_id = #{parent_id,jdbcType=INTEGER}"
    })
    int delete(XxdUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_user
     *
     * @mbggenerated
     */
    @Insert({
        "insert into xxd_user (uid, username, ",
        "password, sex, ",
        "phonenumber, id_card, ",
        "bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id, name, leader_level)",
        "values (#{uid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, ",
        "#{password,jdbcType=VARCHAR}, #{sex,jdbcType=SMALLINT}, ",
        "#{phonenumber,jdbcType=VARCHAR}, #{idCard,jdbcType=VARCHAR}, ",
        "#{bankCard,jdbcType=VARCHAR}, #{bankLocation,jdbcType=VARCHAR}, ",
        "#{type,jdbcType=SMALLINT}, #{salt,jdbcType=VARCHAR}, ",
        "#{is_able,jdbcType=SMALLINT}, #{create_time,jdbcType=VARCHAR}, ",
        "#{parent_id,jdbcType=INTEGER}, #{name,jdbcType=SMALLINT}, #{leader_level,jdbcType=SMALLINT})",
    })
    @Options(useGeneratedKeys=true, keyProperty="uid", keyColumn="uid")
    int insert(XxdUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_user
     *
     * @mbggenerated
     */
    @InsertProvider(type=XxdUserSqlProvider.class, method="insertSelective")
    int insertSelective(XxdUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_user
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id, name",
        "from xxd_user",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR)
    })
    XxdUser selectByPrimaryKey(Integer uid);
    
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id, name",
        "from xxd_user",
        "where type = #{type,jdbcType=SMALLINT}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdUser> selectByUserType(Short type);
    
    @Select({
        "select",
        "count(*) numOne",
        "from xxd_user xu",
        "where xu.`type` = 2 AND xu.`leader_level`= 1"
    })
   
    Integer selectByTypeOneLever();
    
    @Select({
    	"select",
        "count(*) numOne",
        "from xxd_user xu",
        "where xu.`type` = 2 AND xu.`leader_level`= 2"
    })
    Integer selectByTypeTwoLever();
    
    @Select({
        "select",
        "count(*) numMember",
        "from xxd_user",
        "where type = 3"
    })
    Integer selectByTypeMemberLever();
    
    @Select({
    	"SELECT HOUR(xu.create_time) AS hours,COUNT(*) AS counts", 
    	"FROM xxd_user xu ",
    	"WHERE xu.create_time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')",
    	"GROUP BY HOUR(xu.`create_time`) ORDER BY HOUR(xu.`create_time`)"
    })
    ArrayList<XxdCount>  selectUserIncrease(String time);
    
    @Select({
    	"SELECT HOUR(xu.create_time) AS hours,COUNT(*) AS counts", 
    	"FROM xxd_user xu ",
    	"WHERE xu.type = 1 AND xu.create_time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')",
    	"GROUP BY HOUR(xu.`create_time`) ORDER BY HOUR(xu.`create_time`)"
    })
    ArrayList<XxdCount>  selectOneLeverUserIncrease(String time);
    
    @Select({
    	"SELECT HOUR(xu.create_time) AS hours,COUNT(*) AS counts", 
    	"FROM xxd_user xu ",
    	"WHERE xu.type = 2 AND xu.create_time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')",
    	"GROUP BY HOUR(xu.`create_time`) ORDER BY HOUR(xu.`create_time`)"
    })
    ArrayList<XxdCount>  selectTwoLeverUserIncrease(String time);
    
    @Select({
    	"SELECT HOUR(xu.create_time) AS hours,COUNT(*) AS counts", 
    	"FROM xxd_user xu ",
    	"WHERE xu.type = 3 AND xu.create_time BETWEEN DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 00:00:00')  AND DATE_FORMAT(#{type,jdbcType=VARCHAR},'%Y-%m-%d 23:59:59')",
    	"GROUP BY HOUR(xu.`create_time`) ORDER BY HOUR(xu.`create_time`)"
    })
    ArrayList<XxdCount>  selectMemberUserIncrease(String time);
    
    @Select({
        "select",
        "xu.uid uid, xu.username username, xu.name name,xu.create_time create_time,xu.parent_id parent_id,xu1.username parentUsername,xu1.name parentName",
        "from xxd_user xu left join xxd_user xu1 on xu.parent_id = xu1.uid",
        "where xu.type = #{type,jdbcType=SMALLINT}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="parentUsername", property="parentUsername", jdbcType=JdbcType.VARCHAR),
        @Result(column="parentName", property="parentName", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdUser> selectPowerByUserType(Short type);
    
    @Select({
        "select",
        "xui.*,count(xg.id) goods_num,",
        "count(case when xg.grounding_sta = 1 then 1 end) grounding_num,",
        "count(case when xg.grounding_sta = 2 then 1 end) dis_grounding_num",
        "from" ,
        "(SELECT ",
        "xu.uid uid, xu.username username, xu.password password, xu.sex sex, xu.phonenumber phonenumber, xu.id_card id_card, xu.bank_card bank_card, xu.bank_location bank_location, xu.type type, xu.salt salt, xu.is_able is_able, xu.create_time create_time, xu.parent_id parent_id,xu.name name,xu.leader_level leader_level,",
        "xi.integration integration,xi.abled abled,xi.disabled disabled",
        "FROM xxd_integration xi right join xxd_user xu on xi.uid = xu.uid) xui left join xxd_goods xg on xui.uid = xg.ownership_leader_id",
        "where xui.type = #{type,jdbcType=SMALLINT}",
        "and xui.parent_id = #{parent_id,jdbcType=INTEGER}",
        "group by xui.uid"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="leader_level", property="leader_level", jdbcType=JdbcType.SMALLINT),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="abled", property="abled", jdbcType=JdbcType.DECIMAL),
        @Result(column="disabled", property="disabled", jdbcType=JdbcType.DECIMAL),
        @Result(column="goods_num", property="goods_num", jdbcType=JdbcType.INTEGER),
        @Result(column="grounding_num", property="grounding_num", jdbcType=JdbcType.INTEGER),
        @Result(column="dis_grounding_num", property="dis_grounding_num", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUsers> selectLeader(XxdUser record);
    
    @Select({
        "select",
        "xui.*,count(xg.id) goods_num,",
        "count(case when xg.grounding_sta = 1 then 1 end) grounding_num,",
        "count(case when xg.grounding_sta = 2 then 1 end) dis_grounding_num",
        "from" ,
        "(SELECT ",
        "xu.uid uid, xu.username username, xu.password password, xu.sex sex, xu.phonenumber phonenumber, xu.id_card id_card, xu.bank_card bank_card, xu.bank_location bank_location, xu.type type, xu.salt salt, xu.is_able is_able, xu.create_time create_time, xu.parent_id parent_id,xu.name name,xu.leader_level leader_level,",
        "xi.integration integration,xi.abled abled,xi.disabled disabled",
        "FROM xxd_integration xi right join xxd_user xu on xi.uid = xu.uid) xui left join xxd_goods xg on xui.uid = xg.ownership_leader_id",
        "where xui.type = #{type,jdbcType=SMALLINT}",
        "group by xui.uid"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="leader_level", property="leader_level", jdbcType=JdbcType.SMALLINT),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="abled", property="abled", jdbcType=JdbcType.DECIMAL),
        @Result(column="disabled", property="disabled", jdbcType=JdbcType.DECIMAL),
        @Result(column="goods_num", property="goods_num", jdbcType=JdbcType.INTEGER),
        @Result(column="grounding_num", property="grounding_num", jdbcType=JdbcType.INTEGER),
        @Result(column="dis_grounding_num", property="dis_grounding_num", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUsers> selectLeaderType(Short type);
    
    @Select({
        "select", 
        "xui.*", 
        "from", 
        "(SELECT ", 
        "xu.uid uid, xu.username username, xu.password password, xu.sex sex, xu.phonenumber phonenumber, xu.id_card id_card, xu.bank_card bank_card, xu.bank_location bank_location, xu.type type, xu.salt salt, xu.is_able is_able, xu.create_time create_time, xu.parent_id parent_id,xu.name name,", 
        "xi.integration integration,xi.abled abled,xi.disabled disabled", 
        "FROM xxd_integration xi right join xxd_user xu on xi.uid = xu.uid) xui", 
        "where xui.type = #{type,jdbcType=SMALLINT}", 
        "and (select parent_id from xxd_user where uid = xui.parent_id) = #{parent_id,jdbcType=INTEGER}", 
        "group by xui.uid"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="abled", property="abled", jdbcType=JdbcType.DECIMAL),
        @Result(column="disabled", property="disabled", jdbcType=JdbcType.DECIMAL),
        @Result(column="goods_num", property="goods_num", jdbcType=JdbcType.INTEGER),
        @Result(column="grounding_num", property="grounding_num", jdbcType=JdbcType.INTEGER),
        @Result(column="dis_grounding_num", property="dis_grounding_num", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUsers> selectMember(XxdUser record);
    
    @Select({
        "select", 
        "xui.*", 
        "from", 
        "(SELECT ", 
        "xu.uid uid, xu.username username, xu.password password, xu.sex sex, xu.phonenumber phonenumber, xu.id_card id_card, xu.bank_card bank_card, xu.bank_location bank_location, xu.type type, xu.salt salt, xu.is_able is_able, xu.create_time create_time, xu.parent_id parent_id,xu.name name,", 
        "xi.integration integration,xi.abled abled,xi.disabled disabled", 
        "FROM xxd_integration xi right join xxd_user xu on xi.uid = xu.uid) xui", 
        "where xui.type = #{type,jdbcType=SMALLINT}", 
        "group by xui.uid"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="integration", property="integration", jdbcType=JdbcType.DECIMAL),
        @Result(column="abled", property="abled", jdbcType=JdbcType.DECIMAL),
        @Result(column="disabled", property="disabled", jdbcType=JdbcType.DECIMAL),
        @Result(column="goods_num", property="goods_num", jdbcType=JdbcType.INTEGER),
        @Result(column="grounding_num", property="grounding_num", jdbcType=JdbcType.INTEGER),
        @Result(column="dis_grounding_num", property="dis_grounding_num", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUsers> selectMemberType(Short type);
    
    @Select({
        "select",
        "xu.uid uid, xu.username username, xu.password password, xu.sex sex, xu.phonenumber phonenumber, xu.id_card id_card, xu.bank_card bank_card, xu.bank_location bank_location, ",
        "xu.type type, xu.salt salt, xu.is_able is_able, xu.create_time create_time, xu.parent_id parent_id",
        "from xxd_user xu",
        "where xu.type = #{type,jdbcType=SMALLINT}",
        "and xu.parent_id = #{parent_id,jdbcType=INTEGER} "
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUser> selectByTypeParentId(XxdUser record);
    
    @Select({
        "select",
        "xu.uid uid, xu.username username, xu.password password, xu.sex sex, xu.phonenumber phonenumber, xu.id_card id_card, xu.bank_card bank_card, xu.bank_location bank_location, ",
        "xu.type type, xu.salt salt, xu.is_able is_able, xu.create_time create_time, xu.parent_id parent_id",
        "from xxd_user xu",
        "where xu.type = #{type,jdbcType=SMALLINT}",
        "and (select parent_id from xxd_user where uid = xu.parent_id) = #{parent_id,jdbcType=INTEGER} "
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUser> selectByTypeParentsId(XxdUser record);
    
    @Select({
        "select uid from xxd_integration where uid in(SELECT uid FROM xxd_user where type = #{type,jdbcType=SMALLINT} and parent_id = #{parent_id,jdbcType=INTEGER})"
    })
    ArrayList<Integer> selectByTypeHaveInt(XxdUser record);
    
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id",
        "from xxd_user",
        "where parent_id = #{parent_id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUser> selectByParentId(Integer parent_id);
    
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id",
        "from xxd_user",
        "where username = #{username,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    XxdUser selectUserByUsername(String username);
    
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id",
        "from xxd_user",
        "where username like binary #{username,jdbcType=VARCHAR} and (type = 2 or type = 3)"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUser> selectLikeUsername(String username);
    
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id",
        "from xxd_user"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    ArrayList<XxdUser> selectAll();
    
    
    @Select({
        "select xu.uid uid,xu.username username,xu.name name,xup.powers powers,xpg.name powerGroupName,(case when xpg.id is null then 0 else xpg.id end) pgid from (xxd_user_power xup right join xxd_user xu on xu.uid = xup.uid) left join xxd_power_group xpg on xpg.id = xup.power_group_id where xu.type < 2"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER),
        @Result(column="pgid", property="pgid", jdbcType=JdbcType.INTEGER),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="powerGroupName", property="powerGroupName", jdbcType=JdbcType.VARCHAR),
        @Result(column="powers", property="powers", jdbcType=JdbcType.VARCHAR)
    })
    ArrayList<XxdUserPowerGroup> selectUserPowerGroup();
    
    @Select({
        "select",
        "uid, username, password, sex, phonenumber, id_card, bank_card, bank_location, ",
        "type, salt, is_able, create_time, parent_id",
        "from xxd_user",
        "where username = #{username,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.SMALLINT),
        @Result(column="phonenumber", property="phonenumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="id_card", property="idCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_card", property="bankCard", jdbcType=JdbcType.VARCHAR),
        @Result(column="bank_location", property="bankLocation", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.SMALLINT),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_able", property="is_able", jdbcType=JdbcType.SMALLINT),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.VARCHAR),
        @Result(column="parent_id", property="parent_id", jdbcType=JdbcType.INTEGER)
    })
    XxdUser adminLogin(String username);
   

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_user
     *
     * @mbggenerated
     */
    @UpdateProvider(type=XxdUserSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(XxdUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table xxd_user
     *
     * @mbggenerated
     */
    @Update({
        "update xxd_user",
        "set username = #{username,jdbcType=VARCHAR},",
          "password = #{password,jdbcType=VARCHAR},",
          "sex = #{sex,jdbcType=SMALLINT},",
          "phonenumber = #{phonenumber,jdbcType=VARCHAR},",
          "id_card = #{idCard,jdbcType=VARCHAR},",
          "bank_card = #{bankCard,jdbcType=VARCHAR},",
          "bank_location = #{bankLocation,jdbcType=VARCHAR},",
          "type = #{type,jdbcType=SMALLINT},",
          "salt = #{salt,jdbcType=VARCHAR}",
          "is_able = #{is_able,jdbcType=SMALLINT},",
          "create_time = #{create_time,jdbcType=VARCHAR}",
          "parent_id = #{parent_id,jdbcType=INTEGER}",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(XxdUser record);
}